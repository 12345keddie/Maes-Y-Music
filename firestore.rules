/**
 * @file Overview
 * This ruleset enforces a user-centric model for a simple polling application.
 *
 * Data Structure:
 * - /polls/{pollId}: Stores poll documents, accessible for public reading.
 * - /polls/{pollId}/votes/{voteId}: Stores individual votes associated with a poll. Only authenticated users can create votes. Listing votes are restricted to authenticated users.
 *
 * Key Security Decisions:
 * - Polls are publicly readable but only authenticated users can vote.
 * - Listing votes requires the user to be authenticated.
 *
 * Denormalization for Authorization:
 * - The `Vote` entity denormalizes `pollId`. This is used to enforce relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to polls, but restricts write access.
     * @path /polls/{pollId}
     * @allow (get, list): Any user can read polls.
     * @deny (create, update, delete): No one can create, update, or delete polls through direct client requests.
     * @principle Public read, restricted write.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to votes to authenticated users.
     * @path /polls/{pollId}/votes/{voteId}
     * @allow (create): Authenticated users can create votes for a poll, provided the `pollId` matches the parent document.
     * @allow (get, list): Authenticated users can list and get votes.
     * @deny (update, delete): No one can update or delete votes through direct client requests.
     * @deny (create): Rejects vote creation if the `pollId` in the data doesn't match the parent document ID.
     * @principle Enforces authentication and relational integrity for votes.
     */
    match /polls/{pollId}/votes/{voteId} {
      allow create: if isSignedIn() && request.resource.data.pollId == pollId;
      allow get, list: if isSignedIn();
      allow update, delete: if false;
    }

    // --- Helper functions ---
    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}